
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import Error_.Errores;
import Arbol.Nodo;
import Arbol.Token;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;
import java.util.Hashtable;
import java.util.Dictionary;
import java.util.ArrayList;
import java.util.Map;
import PROYECTO1.Nodo_conj;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.errores
  */
@SuppressWarnings({"rawtypes"})
public class a_sintactico extends java_cup.runtime.lr_parser {
  public static int contata=0;
 public final Class getSymbolContainer() {
 
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public a_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public a_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public a_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\003\000\002\004\010\000\002\004\010" +
    "\000\002\004\006\000\002\004\004\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\010\005\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\005" +
    "\000\002\012\005\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\005\000\002\012\003\000\002" +
    "\012\003\000\002\005\004\000\002\005\003\000\002\006" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\004\012\004\001\002\000\010\003\011\004" +
    "\012\026\007\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\031\062\001\002\000\012\003" +
    "\011\004\012\020\047\026\007\001\002\000\004\011\046" +
    "\001\002\000\004\006\014\001\002\000\012\003\ufffe\004" +
    "\ufffe\020\ufffe\026\ufffe\001\002\000\004\026\015\001\002" +
    "\000\004\031\016\001\002\000\012\022\020\023\022\024" +
    "\017\025\021\001\002\000\010\007\ufff1\011\ufff1\021\044" +
    "\001\002\000\010\007\ufff2\011\ufff2\021\042\001\002\000" +
    "\010\007\ufff0\011\ufff0\021\040\001\002\000\010\007\ufff3" +
    "\011\ufff3\021\036\001\002\000\006\007\027\011\030\001" +
    "\002\000\006\007\ufff4\011\ufff4\001\002\000\004\011\026" +
    "\001\002\000\012\003\ufffd\004\ufffd\020\ufffd\026\ufffd\001" +
    "\002\000\012\022\033\023\034\024\031\025\032\001\002" +
    "\000\012\003\ufffc\004\ufffc\020\ufffc\026\ufffc\001\002\000" +
    "\006\007\ufff1\011\ufff1\001\002\000\006\007\ufff0\011\ufff0" +
    "\001\002\000\006\007\ufff2\011\ufff2\001\002\000\006\007" +
    "\ufff3\011\ufff3\001\002\000\006\007\ufff5\011\ufff5\001\002" +
    "\000\004\023\037\001\002\000\004\011\ufff9\001\002\000" +
    "\004\025\041\001\002\000\004\011\ufff7\001\002\000\004" +
    "\022\043\001\002\000\004\011\ufff8\001\002\000\004\024" +
    "\045\001\002\000\004\011\ufff6\001\002\000\012\003\ufffa" +
    "\004\ufffa\020\ufffa\026\ufffa\001\002\000\004\020\051\001" +
    "\002\000\012\003\uffff\004\uffff\020\uffff\026\uffff\001\002" +
    "\000\004\026\052\001\002\000\004\006\057\001\002\000" +
    "\006\013\055\026\052\001\002\000\006\013\uffe6\026\uffe6" +
    "\001\002\000\004\002\000\001\002\000\006\013\uffe7\026" +
    "\uffe7\001\002\000\004\027\060\001\002\000\004\011\061" +
    "\001\002\000\006\013\uffe5\026\uffe5\001\002\000\022\010" +
    "\063\012\064\014\073\015\065\016\070\017\071\027\067" +
    "\030\072\001\002\000\022\010\063\012\064\014\073\015" +
    "\065\016\070\017\071\027\067\030\072\001\002\000\004" +
    "\026\102\001\002\000\022\010\063\012\064\014\073\015" +
    "\065\016\070\017\071\027\067\030\072\001\002\000\004" +
    "\011\100\001\002\000\024\010\uffe9\011\uffe9\012\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\027\uffe9\030\uffe9\001\002" +
    "\000\022\010\063\012\064\014\073\015\065\016\070\017" +
    "\071\027\067\030\072\001\002\000\022\010\063\012\064" +
    "\014\073\015\065\016\070\017\071\027\067\030\072\001" +
    "\002\000\024\010\uffe8\011\uffe8\012\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\027\uffe8\030\uffe8\001\002\000\022\010" +
    "\063\012\064\014\073\015\065\016\070\017\071\027\067" +
    "\030\072\001\002\000\022\010\063\012\064\014\073\015" +
    "\065\016\070\017\071\027\067\030\072\001\002\000\024" +
    "\010\uffee\011\uffee\012\uffee\014\uffee\015\uffee\016\uffee\017" +
    "\uffee\027\uffee\030\uffee\001\002\000\024\010\uffeb\011\uffeb" +
    "\012\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\027\uffeb\030" +
    "\uffeb\001\002\000\024\010\uffec\011\uffec\012\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\027\uffec\030\uffec\001\002\000" +
    "\012\003\ufffb\004\ufffb\020\ufffb\026\ufffb\001\002\000\024" +
    "\010\uffed\011\uffed\012\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\027\uffed\030\uffed\001\002\000\004\013\103\001\002" +
    "\000\024\010\uffea\011\uffea\012\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\027\uffea\030\uffea\001\002\000\022\010\063" +
    "\012\064\014\073\015\065\016\070\017\071\027\067\030" +
    "\072\001\002\000\024\010\uffef\011\uffef\012\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\027\uffef\030\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\004\002\004\001\001\000\006\003\007\004" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\024\010\022\011\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\052\006\053\001\001\000\002\001\001" +
    "\000\004\006\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\065\001\001\000\004\012" +
    "\103\001\001\000\002\001\001\000\004\012\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\076\001" +
    "\001\000\004\012\075\001\001\000\002\001\001\000\004" +
    "\012\073\001\001\000\004\012\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\104\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$a_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$a_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$a_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<Token> arbol = new ArrayList<Token>();
    public static LinkedList<Nodo_conj> evaluar  = new LinkedList<Nodo_conj>();

    public static LinkedList<Errores> errores  = new LinkedList<Errores>();

    public void syntax_error(Symbol s)
    {
        System.out.println("Error de sintaxis en la linea " + (s.left+1) + ", columna " + (s.right+1) + ". No se esperaba " + s.value);
        Errores tmp = new Errores("Error Sintactico recuperable: \"" + s.value + "\"" , "Sintactico recuperable", (s.right) + 1, (s.left) + 1);
        errores.add(tmp);
    }



    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.out.println("Error de sintaxis en la linea " + (s.left+1) + ", columna " + (s.right+1) + ". No se esperaba " + s.value );
        Errores tmp = new Errores("Error Sintactico no recuperable: \"" + s.value + "\"" , "Sintactico no recuperable", (s.right) + 1, (s.left) + 1);
        errores.add(tmp);
    }
 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$a_sintactico$actions {
  private final a_sintactico parser;

  /** Constructor */
  CUP$a_sintactico$actions(a_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$a_sintactico$do_action_part00000000(
    int                        CUP$a_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$a_sintactico$parser,
    java.util.Stack            CUP$a_sintactico$stack,
    int                        CUP$a_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions Token*/ 
      java_cup.runtime.Symbol CUP$a_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$a_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Cod EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$a_sintactico$parser.done_parsing();
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Cod ::= LR_LLAVE_IZQ declaraciones PORCENTAJE PORCENTAJE instrucciones LR_LLAVE_DER 
            {
              Object RESULT =null;

              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("Cod",0, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= declaraciones declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		
                                                {System.out.println("Declaraciones: " + a + " " + b);};
                                                
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		
                                                {System.out.println("Declaraciones: " + a);};
                                    
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion ::= PR_CONJ LR_DOS_PUNTOS ID FLECHA notacion1 LR_PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).value;
		{System.out.println("Declaracion de conjunto: " + a);};
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= PR_CONJ LR_DOS_PUNTOS ID FLECHA notaciones LR_PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).value;
		{System.out.println("Declaracion de conjunto: " + a);};
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= ID FLECHA ER LR_PUNTO_COMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).value;
		{System.out.println("Declaracion de ER: " + b + "=" + a);};
     contata++;
            arbol.add(new Token((Nodo) a, b));
            
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= error LR_PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // notacion1 ::= LETRA_MAYUSCULA SEPARADOR LETRA_MAYUSCULA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		{System.out.println("Notacion 1: " + a + " - " + b);};
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("notacion1",5, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // notacion1 ::= LETRA_MINUSCULA SEPARADOR LETRA_MINUSCULA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		{System.out.println("Notacion 1: " + a + " - " + b);};
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("notacion1",5, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // notacion1 ::= CARACTER_ESPECIAL SEPARADOR CARACTER_ESPECIAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		{System.out.println("Notacion 1: " + a + " - " + b);};
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("notacion1",5, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // notacion1 ::= NUMERO SEPARADOR NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		{System.out.println("Notacion 1: " + a + " - " + b);};
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("notacion1",5, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // notaciones ::= notaciones LR_COMA notacion2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		{System.out.println("Notaciones: " + a + " , " + b);};
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("notaciones",6, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // notaciones ::= notacion2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		{System.out.println("Notaciones: " + a);};
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("notaciones",6, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // notacion2 ::= LETRA_MAYUSCULA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		{System.out.println("Notacion 2: " + a);};
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("notacion2",7, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // notacion2 ::= LETRA_MINUSCULA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		{System.out.println("Notacion 2: " + a);};
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("notacion2",7, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // notacion2 ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		{System.out.println("Notacion 2: " + a);};
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("notacion2",7, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // notacion2 ::= CARACTER_ESPECIAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		{System.out.println("Notacion 2: " + a);};
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("notacion2",7, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ER ::= LR_PUNTO ER ER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		{System.out.println("ER: " + a + " " + b + " " + c);};
Nodo padre = new Nodo(a);
padre.setHijoIzq((Nodo)b);
padre.setHijoDer((Nodo)c);
RESULT=padre;

              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("ER",8, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ER ::= LR_DISYUNCION ER ER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		{System.out.println("ER: " + a + "ER: "+ b +"ER: " +c);};
    Nodo padre = new Nodo(a);
    padre.setHijoIzq((Nodo)b);
    padre.setHijoDer((Nodo)c);
    RESULT=padre;
    
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("ER",8, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ER ::= LR_CERRADURA_KLEENE ER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		{System.out.println("ER: " + a + " " + b);};
    Nodo padre = new Nodo(a);
    padre.setHijoIzq((Nodo)b);
    RESULT=padre;
    
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("ER",8, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ER ::= LR_CERRADURA_POSITIVA ER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		{System.out.println("ER: " + a + " " + b);};
    Nodo padre = new Nodo(a);
    padre.setHijoIzq((Nodo)b);
    RESULT=padre;
    
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("ER",8, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ER ::= LR_CERRADURA_INTERROGACION ER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		{System.out.println("ER: " + a + " " + b);};
    Nodo padre = new Nodo(a);
    padre.setHijoIzq((Nodo)b);
    RESULT=padre;
    
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("ER",8, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ER ::= LR_LLAVE_IZQ ID LR_LLAVE_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).value;
		{System.out.println("ER: " + a);};
    Nodo padre = new Nodo(a);
    padre.setHoja(true);
    RESULT=padre;
    
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("ER",8, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ER ::= SR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		{System.out.println("ER_sint: " + a);};
    Nodo padre = new Nodo(a);
    padre.setHoja(true);
    RESULT=padre;
    
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("ER",8, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ER ::= SRR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		{System.out.println("ER_ESPECIAL: " + a);};
    Nodo padre = new Nodo(a);
    padre.setHoja(true);
    RESULT=padre;
    
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("ER",8, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= ID LR_DOS_PUNTOS SR LR_PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).value;
		System.out.println("Instruccion: " + a + "=" + b);
    evaluar.add(new Nodo_conj(a, b));
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$a_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$a_sintactico$do_action(
    int                        CUP$a_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$a_sintactico$parser,
    java.util.Stack            CUP$a_sintactico$stack,
    int                        CUP$a_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$a_sintactico$do_action_part00000000(
                               CUP$a_sintactico$act_num,
                               CUP$a_sintactico$parser,
                               CUP$a_sintactico$stack,
                               CUP$a_sintactico$top);
    }
}

}
